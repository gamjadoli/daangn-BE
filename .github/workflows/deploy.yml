name: Deploy to Server

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    # develop 브랜치에서 main 브랜치로 머지된 PR이 닫혔을 때만 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        script: |
            # 배포 함수 정의 - 오류 처리를 위한 래퍼 함수
            deploy_app() {
                echo "===== 배포 시작: $(date) ====="
                
                # 프로젝트 디렉토리로 이동
                cd ~/${{ github.event.repository.name }} || {
                    echo "프로젝트 디렉토리를 찾을 수 없습니다."
                    return 1
                }
                
                # 디스크 사용량 및 컨테이너 상태 확인
                echo "Disk usage before cleanup: $(date)" >> deploy_disk_usage.log
                df -h / >> deploy_disk_usage.log
                echo "=== Container Status Before Deployment $(date) ===" >> deploy_container_status.log
                docker ps -a >> deploy_container_status.log
                
                # 코드 업데이트
                echo "코드 업데이트 중..."
                git stash -u  # 추적되지 않는 파일도 포함하여 stash
                git switch main || {
                    echo "main 브랜치로 전환 실패"
                    git checkout -f main || {
                        echo "강제 브랜치 전환도 실패했습니다."
                        return 1
                    }
                }
                
                # git pull 진행 - fetch & merge 방식으로 변경하여 안정성 향상
                echo "최신 코드 가져오는 중..."
                git fetch origin main || {
                    echo "원격 코드 가져오기 실패"
                    return 1
                }
                git merge --ff-only origin/main || {
                    echo "코드 병합 실패"
                    # 충돌 발생 시 강제 리셋 (데이터 손실 위험이 있지만 배포의 안정성 우선)
                    git reset --hard origin/main || {
                        echo "코드 리셋 실패"
                        return 1
                    }
                }
                
                # Docker 리소스 정리
                echo "Docker 리소스 정리 중..."
                # 별도로 명령어 실행하여 오류 발생 가능성 줄임
                docker system prune -f --filter "until=24h" || echo "일부 리소스 정리 실패"
                docker volume prune -f || echo "일부 볼륨 정리 실패"
                
                # 컨테이너 관리
                echo "기존 컨테이너 정리 중..."
                if docker ps -q | grep -q .; then
                    docker stop $(docker ps -q) || echo "일부 컨테이너 중지 실패"
                fi
                
                if docker ps -aq | grep -q .; then
                    docker rm -f $(docker ps -aq) || echo "일부 컨테이너 제거 실패"
                fi
                
                # Docker 서비스 배포
                echo "Docker 서비스 배포 중..."
                docker compose build --no-cache || {
                    echo "Docker 이미지 빌드 실패"
                    return 1
                }
                
                docker compose up -d || {
                    echo "Docker 컨테이너 시작 실패"
                    return 1
                }
                
                # 배포 결과 확인
                echo "배포 결과 확인 중..."
                sleep 10  # 컨테이너가 시작하는데 시간이 걸릴 수 있으므로 잠시 대기
                
                if ! docker ps | grep -q "web"; then
                    echo "웹 서비스가 실행되고 있지 않습니다."
                    return 1
                fi
                
                # 서비스 상태 출력
                echo "Deployment completed at $(date)"
                docker compose ps
                
                # 로그 확인
                echo "Django 로그 확인 중..."
                docker compose logs --tail=20 web || echo "로그를 가져올 수 없습니다."
                
                echo "===== 배포 성공: $(date) ====="
                return 0
            }
            
            # 배포 함수 실행 및 결과 확인
            if deploy_app; then
                echo "배포가 성공적으로 완료되었습니다."
                exit 0
            else
                echo "배포 중 오류가 발생했습니다."
                exit 1
            fi