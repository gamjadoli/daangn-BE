name: Dev Branch Migration Check

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  migration-check:
    runs-on: ubuntu-latest

    env:
      DEV_AWS_RDS_NAME: ${{ secrets.DEV_AWS_RDS_NAME }}
      DEV_AWS_RDS_USER: ${{ secrets.DEV_AWS_RDS_USER }}
      DEV_AWS_RDS_PASSWORD: ${{ secrets.DEV_AWS_RDS_PASSWORD }}
      DEV_AWS_RDS_HOST: ${{ secrets.DEV_AWS_RDS_HOST }}
      DEV_AWS_RDS_PORT: ${{ secrets.DEV_AWS_RDS_PORT }}

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dangma_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache apt packages
        uses: actions/cache@v3
        id: apt-cache
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-gdal-${{ hashFiles('.github/workflows/dev-check.yml') }}
      
      - name: Install GDAL and spatial dependencies
        if: steps.apt-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev python3-gdal binutils libproj-dev libgeos-dev

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: |
          cd django
          poetry install

      - name: Remove existing migrations
        run: |
          cd django
          rm -f */migrations/0*.py

      - name: Check migrations
        run: |
          cd django
          # 직접 환경 변수를 사용하여 기존 설정 파일(dev-aws)로 실행
          poetry run python manage.py makemigrations --settings=a_core.settings.dev-aws
          poetry run python manage.py migrate --settings=a_core.settings.dev-aws
        env:
          # 로컬 테스트 DB 정보 직접 지정
          DEV_DB_NAME: dangma_test
          DEV_DB_USER: postgres
          DEV_DB_PASSWORD: postgres
          DEV_DB_HOST: localhost
          DEV_DB_PORT: 5432
          # AWS 관련 더미 값 설정
          AWS_S3_ACCESS_KEY_ID: dummy-key
          AWS_S3_SECRET_ACCESS_KEY: dummy-secret
          AWS_S3_STORAGE_BUCKET_NAME: dummy-bucket

      - name: Check runserver
        run: |
          cd django
          timeout 5s poetry run python manage.py runserver --settings=a_core.settings.dev-aws || code=$?; if [ $code -eq 124 ]; then exit 0; else exit $code; fi
