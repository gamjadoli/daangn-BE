worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    types_hash_bucket_size 64;
    
    # 로깅 포맷 정의 - 사용하기 전에 먼저 정의해야 함
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '"$http_x_forwarded_for"';
    
    # 로그 설정
    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;
    
    # 유효한 호스트 이름 검증 (정확한 도메인만 허용)
    map $http_host $is_valid_host {
        default 0;
        "dangma.store" 1;
        "www.dangma.store" 1;
        "api.dangma.store" 1;
        "localhost" 1;
        "localhost:8000" 1;
        "127.0.0.1" 1;
        "127.0.0.1:8000" 1;
    }
    
    # 보안 헤더 설정
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    
    # 과도한 요청 제한 설정 (Rate Limiting)
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=5r/s;
    
    # 봇 스캐닝 탐지 및 제한
    map $http_user_agent $bad_bot {
        default 0;
        ~*(scanner|nmap|nikto|sqlmap|dirbuster|gobuster|zgrab|masscan) 1;
    }
    
    # 봇 차단
    map $bad_bot $limit_bot {
        0 "";
        1 $binary_remote_addr;
    }
    limit_req_zone $limit_bot zone=bad_bot:10m rate=1r/m;

    upstream web_backend {
        server web:8000;
    }

    # 기본 서버 블록 - 유효하지 않은 호스트 헤더를 가진 모든 요청을 거부
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_tokens off;
        
        ssl_certificate /etc/letsencrypt/live/dangma.store/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/dangma.store/privkey.pem;
        
        # 유효하지 않은 Host 헤더를 가진 요청 로깅
        access_log /var/log/nginx/invalid_host.log detailed;
        
        # Host 헤더 유효성 검사
        if ($is_valid_host = 0) {
            return 444;  # 응답 없이 연결 종료 (보안상 더 좋음)
        }
        
        # 그 외 모든 요청 거부
        return 403;
    }

    # HTTP -> HTTPS 리디렉션
    server {
        listen 80;
        server_name dangma.store www.dangma.store;
        return 301 https://$host$request_uri;
    }

    # HTTPS 설정
    server {
        listen 443 ssl;
        server_name dangma.store www.dangma.store;

        ssl_certificate /etc/letsencrypt/live/dangma.store/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/dangma.store/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";

        # SSL 설정 추가
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # 보안 헤더 추가
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https:; style-src 'self' 'unsafe-inline';" always;
        
        # 일반적인 해킹 시도 패턴 차단 (phpMyAdmin, wp-admin 등)
        location ~ ^/(phpMyAdmin|phpmyadmin|myadmin|mysql|database|admin|administrator|wp-admin|wp-login)/ {
            limit_req zone=bad_bot burst=1 nodelay;
            deny all;
            return 403;
        }
        
        # .git 및 민감한 파일 접근 차단
        location ~ /\.(git|env|htaccess|config) {
            deny all;
            return 403;
        }
        
        # 어드민 페이지 보호
        location /admin/ {
            limit_req zone=admin_limit burst=5;
            proxy_pass http://web_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 어드민 페이지 접근 시 봇 차단
            if ($bad_bot = 1) {
                return 403;
            }
        }

        location / {
            limit_req zone=api_limit burst=20;
            proxy_pass http://web_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket 연결을 위한 설정 추가
        location /ws/ {
            proxy_pass http://web_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 연결 유지 설정
            proxy_read_timeout 86400;     # 24시간
            proxy_send_timeout 86400;     # 24시간
        }

        location /static/ {
            proxy_pass https://d25ace22rk27wr.cloudfront.net/static/;
            proxy_set_header Host d25ace22rk27wr.cloudfront.net;
        }

        location /media/ {
            proxy_pass https://d25ace22rk27wr.cloudfront.net/media/;
            proxy_set_header Host d25ace22rk27wr.cloudfront.net;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}