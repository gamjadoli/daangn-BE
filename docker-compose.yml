services:
  web:
    build:
      context: .
      dockerfile: django/Dockerfile
    restart: on-failure:5  # 무한 재시작 방지
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 a_core.asgi:application"
    ports:
      - "8000:8000"
    volumes:
      - ./django/:/app/
      - static_volume:/app/static
      - media_volume:/app/media
      # 캐시 관련 볼륨 제거 - 메모리 절약
    env_file:
      - ./django/.env
    environment:
      - DJANGO_SETTINGS_MODULE=a_core.settings.product
      - PYTHONDONTWRITEBYTECODE=1
      # 메모리 최적화 환경변수 추가
      - PYTHONUNBUFFERED=1
      - PYTHONOPTIMIZE=1
      # 메모리 사용량 제한 추가
      - MALLOC_ARENA_MAX=2
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy  # Redis가 건강한 상태일 때만 시작
    deploy:
      resources:
        limits:
          cpus: '0.35'  # CPU 제한
          memory: 300M  # 메모리 제한
        reservations:
          cpus: '0.15'
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[d]aphne' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"  # 로그 크기 제한
        max-file: "1"   # 백업 파일 제한

  nginx:
    image: nginx:1.21-alpine
    restart: on-failure:5
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - static_volume:/app/static
      - media_volume:/app/media
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - web
    deploy:
      resources:
        limits:
          memory: 128M
    networks:
      - backend-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "1"

  redis:
    image: redis:alpine
    restart: always
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"

  # 디스크 공간 자동 정리를 위한 서비스 (스크립트 없이 직접 명령어 실행)
  cleaner:
    image: docker:cli
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: sh
    command: >
      -c "while true; do
          echo '=== 디스크 공간 정리 실행: '`date` '===';
          docker system prune -f --filter 'until=24h';
          docker image prune -f --filter 'until=24h';
          echo '=== 정리 완료 ===';
          sleep 86400;
          done"
    deploy:
      resources:
        limits:
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: unless-stopped
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: sh
    command: -c "trap exit TERM; \
      while :; do \
        certbot renew --webroot -w /var/www/certbot --quiet --deploy-hook 'docker exec nginx nginx -s reload || true'; \
        sleep 12h & wait \$${!}; \
      done"
    depends_on:
      - nginx
    networks:
      - backend-network

volumes:
  static_volume:
  media_volume:

networks:
  backend-network:
    driver: bridge
