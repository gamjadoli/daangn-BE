name: Deploy to Server

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    # develop 브랜치에서 main 브랜치로 머지된 PR이 닫혔을 때만 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        script: |
            # 프로젝트 디렉토리로 이동
            cd ~/${{ github.event.repository.name }}
            
            # 작업 중인 변경사항 있으면 임시 저장
            git stash
            
            # 메인 브랜치로 전환하고 최신 코드 가져오기
            git switch main
            git pull origin main
            
            # 기존 서비스 상태 백업 (선택적)
            docker compose ps > service_status_backup.txt
            
            # 디스크 사용량 확인 및 기록 (배포 전)
            echo "Disk usage before cleanup:" >> deploy_disk_usage.log
            df -h / >> deploy_disk_usage.log
            
            # 빌드 캐시 정리
            echo "Cleaning Docker build cache..."
            docker builder prune -f
            
            # 프로젝트 관련 컨테이너만 중지 후 제거 (다른 프로젝트에 영향 없음)
            docker compose down
            
            # docker-compose.yml에서 version 속성 제거 (경고 방지)
            sed -i '1s/^version.*$//' docker-compose.yml 2>/dev/null || true
            
            # 사용하지 않는 프로젝트 관련 이미지만 제거
            docker compose down --rmi local
            
            # 새 이미지 빌드 및 서비스 시작
            docker compose -f docker-compose.yml build
            
            echo "Starting services with automatic migrations..."
            # docker-compose.yml의 command에 이미 migrate 명령이 포함되어 있습니다
            docker compose -f docker-compose.yml up -d
            
            # 마이그레이션 로그 확인
            echo "Checking migration logs..."
            docker compose logs --tail=50 web | grep -i migrat
            
            # 사용하지 않는 리소스 정리 (위험 요소 줄임)
            docker image prune -a --filter "until=24h" --force
            
            # 배포 완료 로그
            echo "Deployment completed at $(date)"
            docker compose ps