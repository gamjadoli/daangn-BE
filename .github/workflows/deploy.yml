name: Deploy to Server

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    # develop 브랜치에서 main 브랜치로 머지된 PR이 닫혔을 때만 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        script: |
            # 배포 함수 정의
            deploy_app() {
                echo "===== 배포 시작: $(date) ====="
                
                # 프로젝트 디렉토리로 이동
                cd ~/${{ github.event.repository.name }} || {
                    echo "프로젝트 디렉토리를 찾을 수 없습니다."
                    return 1
                }
                
                # 디스크 사용량 체크
                echo "===== 디스크 사용량 확인 (정리 전) ====="
                df -h /
                
                # 불필요한 패키지 및 임시 파일 정리
                echo "===== 시스템 임시 파일 정리 시작 ====="
                sudo apt-get -y autoremove
                sudo apt-get -y autoclean
                sudo apt-get -y clean
                sudo journalctl --vacuum-time=1d
                sudo find /tmp -type f -atime +3 -delete
                sudo find /var/tmp -type f -atime +3 -delete
                sudo find /var/log -type f -name "*.gz" -delete
                sudo find /var/log -type f -name "*.old" -delete
                sudo find /var/log -type f -name "*.1" -delete
                sudo find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;
                echo "===== 시스템 임시 파일 정리 완료 ====="
                
                # pyproject.toml 파일 수정 (package-mode 속성 제거)
                echo "===== pyproject.toml 파일 수정 ====="
                # 파일 백업
                cp pyproject.toml pyproject.toml.bak
                # package-mode 속성 제거
                sed -i '/package-mode/d' pyproject.toml
                # 수정된 파일 확인
                echo "PyProject.toml 파일 수정됨:"
                grep -n "package-mode" pyproject.toml || echo "package-mode 속성이 성공적으로 제거됨"
                
                # Docker 시스템 정리 (디스크 공간 확보를 위한 강력한 정리)
                echo "===== Docker 시스템 정리 시작 ====="
                # 실행 중인 컨테이너를 확인하고 필요한 경우만 중지
                echo "실행 중인 앱 컨테이너 중지..."
                docker ps -q | xargs -r docker stop
                
                # 모든 컨테이너 제거 (실행 중이 아닌 컨테이너)
                echo "컨테이너 정리..."
                docker ps -aq | xargs -r docker rm -f
                
                # 사용하지 않는 이미지, 네트워크, 볼륨 제거 (더 안전한 방식으로)
                echo "미사용 Docker 리소스 정리..."
                docker system prune -af --volumes
                
                # 데이터베이스를 제외한 모든 볼륨 정리
                echo "불필요한 볼륨 정리..."
                docker volume ls -q | grep -v "db_data" | xargs -r docker volume rm
                
                # 시스템 캐시 정리
                echo "시스템 캐시 정리..."
                sudo sh -c "sync; echo 1 > /proc/sys/vm/drop_caches"
                echo "===== Docker 시스템 정리 완료 ====="
                
                # 코드 업데이트
                echo "===== 코드 업데이트 ====="
                git fetch origin main
                git reset --hard origin/main
                
                # 최적화된 이미지 빌드를 위한 Docker Compose 실행
                echo "===== Docker 이미지 빌드 ====="
                # 메모리 부족 문제 해결을 위해 단일 서비스 순차 빌드
                # 빌드 캐시를 활용하여 빌드 시간 최적화 (--no-cache 제거)
                docker compose build redis
                docker compose build web
                docker compose build nginx
                
                # 서비스 실행
                echo "===== 서비스 시작 ====="
                docker compose up -d --force-recreate
                
                # 최종 디스크 사용량 체크
                echo "===== 디스크 사용량 확인 (배포 후) ====="
                df -h /
                
                # 컨테이너 상태 확인
                docker compose ps
                
                # 정상적으로 실행 중인지 확인
                if ! docker ps | grep -q "web"; then
                    echo "===== 오류: 웹 서비스가 실행되지 않았습니다 ====="
                    docker compose logs web
                    return 1
                fi

                echo "===== 배포 완료: $(date) ====="
                return 0
            }
            
            # 배포 함수 실행
            deploy_app
            EXIT_CODE=$?
            
            if [ $EXIT_CODE -eq 0 ]; then
                echo "배포가 성공적으로 완료되었습니다."
                exit 0
            else
                echo "배포 중 오류가 발생했습니다."
                exit 1
            fi