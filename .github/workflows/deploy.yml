name: Deploy to Server

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    # develop 브랜치에서 main 브랜치로 머지된 PR이 닫혔을 때만 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        script: |
            # 프로젝트 디렉토리로 이동
            cd ~/${{ github.event.repository.name }}
            
            # 작업 중인 변경사항 있으면 임시 저장
            git stash
            
            # 메인 브랜치로 전환하고 최신 코드 가져오기
            git switch main
            git pull origin main
            
            # 디스크 사용량 확인 및 기록 (배포 전)
            echo "Disk usage before cleanup: $(date)" >> deploy_disk_usage.log
            df -h / >> deploy_disk_usage.log
            
            # 모든 컨테이너 상태 확인 및 기록
            echo "=== Container Status Before Deployment $(date) ===" >> deploy_container_status.log
            docker ps -a >> deploy_container_status.log
            
            # 사용하지 않는 Docker 리소스 정리 (주의해서 실행)
            echo "Cleaning unused Docker resources..."
            docker system prune -f --volumes --filter "until=24h"
            
            # 실행 중인 모든 컨테이너 중지 및 제거 (clean start)
            echo "Stopping all running containers..."
            if [ "$(docker ps -q)" ]; then
              docker stop $(docker ps -q)
            fi
            
            echo "Removing all containers..."
            if [ "$(docker ps -aq)" ]; then
              docker rm $(docker ps -aq)
            fi
            
            # 새 이미지 빌드
            echo "Building new images..."
            docker compose build
            
            # 모든 서비스 시작
            echo "Starting all services..."
            docker compose up -d
            
            # 서비스 상태 확인
            echo "Deployment completed at $(date)"
            docker compose ps
            
            # 마이그레이션 로그 확인
            echo "Checking migration logs..."
            docker compose logs --tail=20 web | grep -i migrat